use crate::lexer::Token;
use crate::ast::*;

// ============================================================ extern types

grammar;

extern {
    type Error = ();
    type Location = usize;

    enum Token {
        "." => Token::Dot,      "," => Token::Comma,          // . ,
        ":" => Token::Colon,  ";" => Token::SemiColon,  // : ;
    
        "(" => Token::ParenL,    ")" => Token::ParenR,    // ( )
        "{" => Token::BraceL,    "}" => Token::BraceR,    // { }
        "<" => Token::AngleL,    ">" => Token::AngleR,    // < >
        "[" => Token::SquareL,  "]" => Token::SquareR,  // [ ]
    
        "<-" => Token::ArrowL, "->" => Token::ArrowR,       // <- ->

        "fun" => Token::KwFun, "ret" => Token::KwRet,           // fun ret
    
        Identifier => Token::Identifier(<String>),
    
        LiteralNumber => Token::LiteralNumber(<i32>),
    }
}

// ============================================================ actual grammar:

// -------------------------------------------------------- lists:


// -------------------------------------------------------- expressions:
LiteralExpression: Expression = {
    LiteralNumber => Expression::LiteralExpression(expression::LiteralExpression { value: <>}),
}

Expression: Expression = {
    LiteralExpression => <>,
}

// -------------------------------------------------------- statements:

ReturnStatement: Statement = {
    "ret" <Expression> ";" => Statement::ReturnStatement(<>),
}

Statement: Statement = {
    ReturnStatement => <>,
}

// -------------------------------------------------------- definitions:

pub FunctionDefinition: definition::FunctionDefinition = {
    "fun" <n:Identifier> "(" ")" "->" Identifier
    "{" <s:Statement> "}"
    => definition::FunctionDefinition {
        name: n.to_string(),
        return_type_name: "".to_string(),
        body_statements: vec![s],
        body_last_expression: None,
    }
}

pub Definition: Definition = {
    FunctionDefinition => Definition::FunctionDefinition(<>),
}

pub DefinitionList: Vec<Definition> = {
    Definition+
}


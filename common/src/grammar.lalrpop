use crate::lexer::token::Token;
use crate::ast::*;

grammar;

extern {
    type Error = ();
    type Location = usize;

    enum Token {
        Dot => Token::Dot,      Comma => Token::Comma,
        Colon => Token::Colon,  SemiColon => Token::SemiColon,
    
        ParenL => Token::ParenL,    ParenR => Token::ParenR,
        BraceL => Token::BraceL,    BraceR => Token::BraceR, 
        AngleL => Token::AngleL,    AngleR => Token::AngleR,
        SquareL => Token::SquareL,  SquareR => Token::SquareR,
    
        ArrowL => Token::ArrowL, ArrowR => Token::ArrowR,
    
        Identifier => Token::Identifier(String),
    
        LiteralNumber => Token::LiteralNumber(i32),
    }
}

pub DefinitionList: Vec<Definition> = {
    LiteralNumber => vec![],
}